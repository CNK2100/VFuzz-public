
>[Vulnerability description]

Z-Wave  controller supporting security 2 (S2) encryption with chipset 700 are vulnerable to improper authorization (CWE-285)
vulnerability, which may allow a remote, unauthenticated attacker to inject an invalid FIND_NODE_IN_RANGE with an invalid random added payload parameter. 
This causes denial of service (DoS) on a  target Z-Wave controller. Affected products include  Z-Wave controllers with 700 chipset. This vulnerability is due the lack of authenticating the sender and unencrypted FIND_NODE_IN_RANGE frames. This vulnerability can be fixed by authenticating the sender and mandate the encryption of FIND_NODE_IN_RANGE frame. 

>[Additional Information]

With the use of tools and transceivers that can decode Z-Wave frame( e.g., Scapy-radio with HackRF One;
Yard Stick One; RFCat ; RTL-SDR; Zniffer with Sigma UZB) an attacker sniffs and captures any Z-Wave 
communication of a target Z-Wave smart home. Then he retrieves the Z-Wave HomeID and NodeID of devices 
that are transmiting packets in the network. With the knowledge of the HomeID, the attacker can brute force 
the Z-Wave network to know all remaining available smart devices in the network. This is achieved by sending
to all possible Z-Wave node (2 to 232) either these Z-Wave frames: No Operation (NOP), SWITCH_BINARY_GET,
or Node Information (NIF), SECURITY_NONCE_GET, SECURITY_2_NONCE_GET  to get the acknowledgement (ACK) from devices. 

From this ACK the attacker retrieves the node ID of devices that responded and 
their NIF capabilities. 

With the knowledge of the Z-Wave HomeID and NodeID of the device, 
the attacker crafts a malicious FIND_NODE_IN_RANGE packet with a desired random payload and sends it to the target device 
by using a customized Z-Wave packet management software and  HackRF One, or  Yard Stick One,  RFCat, or CC1110. 

The controller will accept and validate the packet and will be in BUSY_MODE and cannot process other valid incoming Z-Wave traffic from motion sensors, door lock, etc. Therefore, denying the validation and execution of pre-configured scene and automations.

This attack is critical because it renders the Z-Wave controllers vulnerable to DoS attacks, which make their service inaccessible. The buggy packet frame was generated because of VFUZZ mutating the HDR to 0×01 and the CmdCL to 0×04 (FIND NODES IN RANGE) with a randomly inserted payload. This CmdCL causes the controller to search for neighbors’ devices. As the payload is random, the controller searches for rogue devices by continuously sending NOP and could not proceed with any upcoming device events. Thus, the user could not be notified about any of the events happening in the smart home, such as burglary, fire alarm, water leak, and gas leak. The bug is due to the Z-Wave specification, the lack of authentication of the sender, and the lack of verification of the packet’s application payload.

------------------------------------------

>[How does an attacker exploit this vulnerability ?]

Attacker and target device need to be within a range of 30 meters. 
The range can be increased by using an advanced Software-Defined Radio (SDR) hardware.
------------------------------------------

>[What is the impact of this vulnerability ?]

 Denial of service (DoS) on Z-Wave controller.
------------------------------------------

>[Vendor of Product]
  Silicon Labs
------------------------------------------

> [Affected Product Code Base]
  Z Wave S2 controllers with chipsets 700 Series.
------------------------------------------

>[Affected Component]
  Improper authorization (CWE-285) and  Origin Validation Error (CWE-346)
------------------------------------------
 
>[Attack Type]
  Proximate remote attack
------------------------------------------

>[Impact Denial of Service]
 Denial of Service on the controller.
------------------------------------------

>[Attack Vectors]
  By crafting an invalid Z-Wave device's FIND_NODE_IN_RANGE frame and sending it to the controller.  
------------------------------------------
 
>[Reference]
  
  https://ieeexplore.ieee.org/document/9663293
  https://www.youtube.com/watch?v=RdVWxwg3FIE&ab_channel=C.
  https://kb.cert.org/vuls/id/142629
  
  https://www.silabs.com/products/development-tools/software/z-wave
  https://github.com/OpenZWave
  https://www.silabs.com/documents/login/miscellaneous/SDS13784-Z-Wave-Network-Protocol-Command-Class-Specification.pdf
------------------------------------------ 
>[Discoverer]
  CNK CCSLab
